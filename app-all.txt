from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from datetime import datetime
from werkzeug.utils import secure_filename
import bcrypt
import pyqueries
app = Flask(__name__)

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite

import cs304dbi as dbi

# import cs304dbi_sqlite3 as dbi

import random
import helper

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

@app.route('/')
def index():
    return render_template('main.html', header ='Welcome to Wendy Works')


@app.route('/join/', methods=["GET", "POST"])
def join():
    conn = dbi.connect()
    if request.method == 'GET':
        return render_template('create.html', header ='Create an Account')
    else: #request method is POST
       
        try: #getting account information first 
            username = request.form.get("username") 
            pass1=request.form.get("pswrd") 
            pass2=request.form.get("pswrd-repeat")
        #getting contact information
            email=request.form.get("email")
            f_name=request.form.get("f_name")
            l_name=request.form.get("l_name")
        #getting checked skills as a list 
            skills=request.form.getlist("skills")
        #getting other skills, changing into a list 
            other_skills = request.form.get("other_skills").split(",")


        #checking if passwords match before creating account 
        #or inserting anything 
            if pass1 != pass2:
                flash('passwords do not match')
                return redirect( url_for('index'))
            
            hashed = bcrypt.hashpw(pass1.encode('utf-8'),
                        bcrypt.gensalt())
            stored = hashed.decode('utf-8')

            #potentially add a check to ensure a user with that username is not 
            #already in the db? 
          
            if pyqueries.check_usern(conn,username) != None:
                print("ENTERING THE IF STATEMENT")
                flash("Username is taken. Please enter a unique username")
                return render_template('create.html', header ='Create an Account')
       
       #if usernam does not exist, continue inserting 
        #inserting into database
            pyqueries.insert_new_user(conn,username,email,f_name,l_name,stored)
        #getting last uid
            row = pyqueries.get_uid(conn)
            uid = row.get("last_insert_id()")
            
            
        #inserting skills 
            pyqueries.insert_skills(conn,uid,skills)

            if len(other_skills) > 0:
                pyqueries.insert_other_skills(conn, uid, other_skills)

            
            flash('Account created! Please log in')
            return redirect(url_for("login"))

        except Exception as err:
            flash('form submission error'+ str(err))
            return redirect( url_for('index') )


@app.route('/login/', methods = ["GET", "POST"])
def login(): 
    if request.method == 'GET': 
        return render_template('login.html', header = 'Login to Wendy Works')
    else: 
        uname = request.form.get('username')
        in_pw = request.form.get('passw')
        conn = dbi.connect()
        result = pyqueries.login_user(conn, uname, in_pw)
        print("Result", result)
        try: 
            #if the user is in the database
            if result >=1:
                timestamp = datetime.now() #not sure if we need this
                ip = str(request.remote_addr) #not sure if we need this
                session['uid'] = result #we do need this
                pyqueries.setsession(conn,result, timestamp, ip)
                return redirect(url_for('profile', uid = result))
            #if incorrect password
            elif result is False:
                flash('Sorry, your password is incorrect, try again')
                return redirect(url_for('login'))
        #if that username is not in the db
        except Exception as e: 
            print("Exception occurred:", e)
            flash('Sorry, no username found, create an account')
            return(redirect(url_for('join')))
            
      
@app.route('/search/', methods = ["GET", "POST"])
def search():
    conn = dbi.connect() 
    print(request.method)
    if request.method == 'GET':
        return render_template('search.html', header ='Search for a post')
    else: #method should be post 
        u_input = request.form.get('query')
        u_kind = request.form.get('kind')
        print(u_input)
        print(u_kind)
        if u_kind == 'provision':
            print("Entering Provision")
            providers = helper.providers(conn, u_input)
            print(providers)
            print(type(providers))
            return render_template('providers.html', key_phrase=u_input, providers = providers)
        if u_kind == 'request':
            print("Entering request")
            requests = helper.find_requests(conn, u_input)
            return render_template('requests.html', key_phrase=u_input, requests = requests)



@app.route('/insert/', methods=["GET", "POST"])
def insert_post():
    '''
    This function is for a user to create a post
    '''
    conn = dbi.connect()
    
    if request.method == 'GET':
        return render_template('insert_post.html')
    else:
        # Collect relevant form information into variables
        print(request.form)
        username = request.form.get('u_name')
        user_id = helper.get_user(conn, username)
        uid = user_id['uid']
        date = datetime.now()
        print(uid)
        title = request.form.get('title')
        body = request.form.get('body')
        categories = request.form.getlist('category')
        print(categories)
        type = request.form.get('type')
        # Flash messages accordingly for missing inputs
        if not body:
            flash('missing input: no body text')
        if not type:
            flash('missing input: no type')
        if not title:
            flash('missing input: no title')
        if not categories:
            flash('missing input: no category selected')
        # If any one of the inputs or combination of inputs is missing, 
        # redirect them to fill out the form again.
        if not body or not title or not categories or not type or str(title).isnumeric():
            return redirect(url_for('insert_post'))
        
        helper.insert_post(conn, uid, title, body, categories, type, date)
        post_id = helper.get_pid(conn)
        
        print(post_id)
        pid = post_id['last_insert_id()']
        print(pid)
       
        flash('Your post was inserted successfully')
        return redirect(url_for('post', pid=pid)) #how do we get the pid??



@app.route('/post/<int:pid>')
def post(pid):
    """
    this funciton displays the specified post
    """
    conn = dbi.connect() 
    #getting post information
    post_info = helper.get_post(conn, pid)
    #getting poster information
    account_info= pyqueries.get_account_info(conn,post_info.get('uid'))
    
    return render_template("display_post.html", post_info=post_info, account_info=account_info)

@app.route('/profile/<int:uid>', methods = ["GET", "POST"])
def profile(uid):
    """
    This function is used for the profile page, getting all
    of the user's information to be displayed
    """
    if session['uid'] == uid: 
        conn = dbi.connect() 
        information = pyqueries.get_account_info(conn, uid)
        skills = pyqueries.get_skills(conn, uid) 
        fname = information['f_name']
        lname = information['l_name']
        usernm = information['username']
        mail = information['email']
        usid = information['uid']
        if request.method == 'GET': 
            return render_template("account_page.html", fnm = fname, lnm = lname,
                                username = usernm, email = mail, all_skills = skills, user = usid)
        else:  #the method is post
            return redirect(url_for('update', user = uid))
    else: 
        flash('Sorry, you cannot access this page')
        return(redirect(url_for('login')))
  

@app.route('/update/<int:user>', methods = ["GET","POST"])
def update(user):
    """
    Any changes the user makes to their information 
    runs through this function
    updates the database or displays update form
    """
    conn = dbi.connect() 
    if request.method == "POST": 
        firstnm = request.form.get('fname')
        lastnm = request.form.get('lname')
        mail = request.form.get('email')
        username = request.form.get('username')
        skills_input = request.form.get('skills')
        #remove old skills from the db
        pyqueries.delSkills(conn, user)
        updated_skills = [skill.strip() for skill in skills_input.split(',')]
        #add new skills to the db
        pyqueries.insert_other_skills(conn, user, updated_skills)
        #userid stays the same so this is just updating additional info
        pyqueries.updateUser(conn, user, firstnm, lastnm, mail, username)
        return redirect(url_for('profile', uid = user))
    else: #method is get
        info = pyqueries.get_account_info(conn, user)
        uskills = pyqueries.get_skills(conn, user)
        print("Skills ", uskills)
        return render_template("update_profile.html", account = info, skills = uskills, user = user)


@app.route('/logout/')
def logout():
    """
    Logs the user out and ends the session
    """
    session.pop('uid', None)
    flash("You've logged out, please visit again soon!")
    #end the session here 
    return redirect(url_for('index'))


if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    db_to_use = 'wworks_db' 
    print('will connect to {}'.format(db_to_use))
    dbi.conf(db_to_use)
    app.debug = True
    app.run('0.0.0.0',port)
import cs304dbi as dbi


def insert_post(conn, uid, title, body, categories, type, date):
    '''
    Helper function to insert a created post into the database
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 INSERT INTO post(uid, title, body, categories, type, post_date)
                 VALUES (%s, %s, %s, %s, %s, %s)
                 ''', [uid, title, body, categories, type, date])
    conn.commit()


# pid INT AUTO_INCREMENT PRIMARY KEY,
#   `uid` INT NOT NULL, 
#   title VARCHAR(40) NOT NULL, 
#   body TEXT NOT NULL, 
#   post_date DATE NOT NULL,
#   categories SET('clothing', 'fitness', 'beauty', 'crafts', 'transportation', 'photography', 'other') NOT NULL,
#   `type` ENUM('request', 'provision'), 
#   `status` ENUM('open', 'closed', 'in progress') NOT NULL, 

def get_user(conn, username):
    '''
    Helper function to insert a created post into the database
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 SELECT uid 
                 from user
                 where username = %s
                 ''', [username])
    return curs.fetchone()

def get_post(conn, pid):
    '''
    Helper function to get a post given its pid
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 SELECT * from post 
                 WHERE pid = %s
                 ''', [pid])
    return curs.fetchone()

def get_pid(conn):
    """A quick helper function to get uid using last-insert"""
    curs = dbi.dict_cursor(conn)
    curs.execute('''select last_insert_id()''')
    return curs.fetchone()

def find_requests(conn, key_phrase):
    '''
    Helper function to find posts including the relevant keyword 
    for a request
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 select *
                 from post
                 where body like (%s) and type = 'request'
                 ''', ['%' + key_phrase + '%'])

    return curs.fetchall()


def providers(conn, key_phrase):
    '''
    Helper function to find users who can provide a service
    based on the categories that the "provider" has linked to
    their account
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 select *
                 from post
                 where body like (%s) and type = 'provision'
                 ''', ['%' + key_phrase + '%'])
    return curs.fetchall()

def find_service_by_cat(conn, cat):
    '''
    Helper function to find posts that belong to a certain category
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 select *
                 from post
                 where categories = %s
                 ''', [cat])
    results = curs.fetchall()
    return results

if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'wworks_db' 
    print('will connect to {}'.format(db_to_use))
    conn = dbi.connect()
    uid_test = get_user(conn, 'test1')
    print(uid_test)
    dbi.conf(db_to_use)
    app.debug = True
    app.run('0.0.0.0',port)
import cs304dbi as dbi
import bcrypt
# import cs304dbi_sqlite3 as dbi

def insert_new_user(conn,username,email,f_name,l_name,hashed):
    '''
    Takes user account information and inserts in to the user table database 
    '''
    curs = dbi.dict_cursor(conn)
    try:
        curs.execute('''
                 INSERT INTO user(username,email,f_name,l_name,`password`) 
                 VALUES (%s,%s,%s,%s,%s)
                 ''',
                 [username,email,f_name,l_name,hashed])
        conn.commit()
        return  
    except Exception as err:
        return ('Error: {}'.format(repr(err)))
 

def check_usern(conn,username):
    '''
    Checks if user name is already in the database 
    '''
    curs = dbi.dict_cursor(conn)
    curs.execute('''
            Select * from user where username = (%s)
                ''',
                (username))
    return curs.fetchone()


    


def get_uid(conn):
    """A quick helper function to get uid using last-insert"""
    curs = dbi.dict_cursor(conn)
    curs.execute('''select last_insert_id()''')
    return curs.fetchone()




def insert_skills(conn, uid,skills):
    """This function intends to insert any skills users have checked
    or have added in as other"""
    curs = dbi.dict_cursor(conn)
    for skill in skills:
        curs.execute('''
                    INSERT INTO skills(uid,skill) 
                    VALUES (%s,%s)
                    ''',
                    [uid,skill])
        conn.commit()
    return 

def insert_other_skills(conn, uid, other_skills):
    """This function intends to insert any skills users have checked
    or have added in as other"""
    curs = dbi.dict_cursor(conn)
    for skill in other_skills:
        if skill!= '':
            curs.execute('''
                    INSERT INTO skills(uid,skill) 
                    VALUES (%s,%s)
                    ''',
                    [uid,skill])
            conn.commit()
    return 


def get_skills(conn, uid): 
    """
    This function gets all skills
    that the user has in the database
    """
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                select * from skills where uid= (%s)
                 ''', [uid]) 
    return curs.fetchall()


def get_account_info(conn,uid):
    """This function returns users information using uid """
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                    select * from user where uid= (%s)
                    ''',
                    [uid])
    return curs.fetchone()

    

def login_user(conn, username, pass1):
    """
    This function checks if the input and hashed
    passwords are the same and returns the uid, false, 
    or, if not found, None

    """ 
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                 select f_name, `uid`, `password` from user 
                 where username= (%s)
                 ''', [username])
    element = curs.fetchone() 
    print("Element", element)
    if element is not None: 
        passw = element['password']

        hashed2 = bcrypt.hashpw(pass1.encode('utf-8'), passw.encode('utf-8'))
        hashed2_str = hashed2.decode('utf-8')
        if hashed2_str == passw:
            return element['uid']
        else: 
            return False
    else:
        return None

def updateUser(conn, user, firstnm, lastnm, mail, username):
    """
    Updates the user's information in the database
    """
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                    update user set username = %s, email = %s, f_name = %s, l_name = %s
                    where `uid`=(%s)
                 ''', [username, mail, firstnm, lastnm, user])   
    conn.commit() 
    

def delSkills(conn, user): 
    """
    Removes skills in the database
    """
    curs = dbi.dict_cursor(conn)
    curs.execute('''
                delete from skills where uid =(%s)
                 ''', [user])
    conn.commit() 

def setsession(conn, result, timestamp, uip): 
    """
    sets session information for the database
    will be utilized in next version of project
    """
    curs = dbi.dict_cursor(conn)
    curs.execute('''
    INSERT INTO session (`uid`, st, ip) 
    VALUES (%s, %s, %s)
     ''', [result,timestamp, uip])
    conn.commit() 



USE wworks_db;

INSERT INTO `user` (username, email, f_name, l_name, `password`, skills) VALUES
('nd105', 'nd105@wellesley.edu', 'Noelle', 'Davis', 'pw123', 'sewing, fitness ,car'),
('janedoe', 'jane.doe@wellesley.edu', 'Jane','Doe','pw456', 'car'),
('wendywells', 'ww123@wellesley.edu', 'Wendy', 'Wellesley', 'redtomato', 'automobile');


INSERT INTO `post` (`uid`, `title`, `body`, `post_date`, `categories`, `status`) VALUES
(1, 'The Best Fitness Routines?', 'In the KSC, how do I use the stairmaster?', '2023-09-10', 'fitness', 'open'),
(1, 'Photography Tips for Beginners?', 'When framing Galen Stone Tower, how do I keep the light from reflecting in my lens? ', '2023-10-02', 'photography', 'in progress'),
(2, 'DIY Crafts for Home Decor?', 'I need help creating a wreath', '2023-08-20', 'crafts', 'closed');


INSERT INTO `replies` (`pid`, `uid`, `body`) VALUES
(1, 2, ' Hopping on the Stair master now! I can show you SO soon :)'),
(2, 3, 'I have some photography tips! Let me know when you are free'),
(1, 2, 'DIY Crafts are really my thing! I make fall decor all the time');{% extends "base.html" %}

{% block main_content %}
<body>
    <h1>Welcome {{ fnm }}!</h1>
    <form method ="POST" action="/update/{{user}}">
        <div class="information-box">
            <h2>Your information:</h2>
            <p> Name: {{fnm}} {{lnm}} </p>
            <p>Username: {{ username }}</p>
            <p>Email: {{ email }}</p>


            <h3 class="your-skills">Skills:</h3>
            <ul>
                {% for task in all_skills %}
                <li>{{ task.skill }}</li>
                {% endfor %}
            </ul>
            <a href="{{ url_for('update', user=user) }}" class="button">Update</a>
        </div>
    </form>

    <div class="photobox">
        <p>Your profile photo:</p>
        <form method="POST" action="" enctype="multipart/form-data">
            <p><label>Change Photo: <input type="file" name="pic"></label></p>
            <p><input type="submit" value="upload"></p>
        </form>
    </div>
    
</body>




{% endblock %}<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

            
{% block nav %}
<nav>
  <ul>
    {% if 'uid' not in session %}
      <li><a href="{{ url_for('index') }}">Home</a></li>
    {% else %}
      <li><a href="{{ url_for('logout') }}">Logout</a></li>
      <li><a href="{{ url_for('profile', uid=session['uid']) }}">Profile</a></li>
      <li><a href="{{url_for('posts')}}"> Recent Posts</a></li>
      <li><a href="{{url_for('insert_post')}}"> New Post</a></li>
      
    {% endif %}
  </ul>
</nav>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

            
{% block nav %}
<nav>
  <ul>
    {% if 'uid' not in session %}
      <li><a href="{{ url_for('index') }}">Home</a></li>
      <li><a href="{{url_for('insert_post')}}"> New Post</a></li>
    {% else %}
      <li><a href="{{ url_for('logout') }}">Logout</a></li>
      <li><a href="{{ url_for('profile', uid=session['uid']) }}">Profile</a></li>
      <li><a href="{{url_for('posts')}}"> Posts</a></li>
      
    {% endif %}
  </ul>
</nav>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

            
{% block nav %}
<nav>
  <ul>
    {% if 'uid' not in session %}
      <li><a href="{{ url_for('index') }}">Home</a></li>
    {% else %}
      <li><a href="{{ url_for('logout') }}">Logout</a></li>
      <li><a href="{{ url_for('profile', uid=session['uid']) }}">Profile</a></li>
      <li><a href="{{url_for('search')}}"> Search Posts</a></li>
      <li><a href="{{url_for('insert_post')}}"> New Post</a></li>
      
    {% endif %}
  </ul>
</nav>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

            
{% block nav %}
<nav>
  <ul>
    {% if 'uid' not in session %}
      <li><a href="{{ url_for('index') }}">Home</a></li>
      
    {% else %}
      <li><a href="{{ url_for('logout') }}">Logout</a></li>
      <li><a href="{{ url_for('profile', uid=session['uid']) }}">Profile</a></li>
      <li><a href="{{url_for('posts')}}"> Posts</a></li>
      <li><a href="{{url_for('insert_post')}}"> New Post</a></li>
      
    {% endif %}
  </ul>
</nav>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

            
{% block nav %}
<nav>
  <ul>
    {% if 'uid' not in session %}
      <li><a href="{{ url_for('index') }}">Home</a></li>
    {% else %}
      <li><a href="{{ url_for('logout') }}">Logout</a></li>
      <li><a href="{{ url_for('profile', uid=session['uid']) }}">Profile</a></li>
      <li><a href="{{url_for('posts')}}"> Recent Posts</a></li>
      <li><a href="{{url_for('insert_post')}}"> New Post</a></li>
      
    {% endif %}
  </ul>
</nav>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}
{% endblock %}

{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>
</html>
{% extends "base.html" %}

{% block main_content %}
<h1>{{header}}</h1>

<form method=post action="{{url_for('join')}}">
  <p> Sign up using this form:</p>
 
  <table>
    <p>Contact Info:</p>
    <tr><label for="email"><b>Wellesley Email</b></label>
    <input type="text" placeholder="Enter Email" name="email" required></tr>
    <br>
    <tr><label for="f_name"><b>First name: </b></label>
        <input type="text" placeholder="Enter first name" name="f_name" required></tr>
        <br>
    <tr><label for="l_name"><b>Last name: </b></label>
        <input type="text" placeholder="Enter last name" name="l_name" required></tr>
        <br>


    <p>Account Info:</p>
    
    <tr><label for="username"><b>Username</b></label>
    <input type="text" placeholder="Username" name="username" required></tr>
    <br>
    <tr> <label for="psw"><b>Password</b></label>
    <input type="password" placeholder="Enter Password" name="pswrd" required></tr>
    <br>
    <tr><label for="psw-repeat"><b>Repeat Password</b></label>
    <input type="password" placeholder="Repeat Password" name="pswrd-repeat" required></tr>
    <br> 
    <p>Please check off any skills you are interested in providing.</p>
        <label>
            <input type="checkbox" name="skills" value="cooking"> Cooking
        </label>
        <br>
        <label>
            <input type="checkbox" name="skills" value="crafts" > Crafts
        </label><br>
        <label>
            <input type="checkbox"  name="skills" value="fitness" > Fitness
        </label><br>
        <label>
            <input type="checkbox"  name="skills" value="sewing" > Sewing
        </label><br>
        <label>
            <input type="checkbox"  name="skills" name="transportation" > Tranportation
        </label><br>
    
    <p>Are you looking to provide any skills we don't have listed? Please enter any skills you have seperated by a comma (e.g cooking,sewing)</p>
    <tr><label for="other_skills"><b>Other skills</b></label>
    <input type="text" placeholder="Enter skills" name="other_skills"></tr>
    </table>


    <p> <input type='submit' value='Submit'> </p>


</form>



{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>{{header}}</h1>
    <table class="posts"> 
        <tr> 
            <th>Title</th> 
            <th>Text</th> 
            <th>Categories</th> 
            <th>Status</th>
            <th>Post Date</th>
            <th>Poster Contact Information</th>
        </tr> 
        <tr> 
            <td>{{post_info.title}}</td> 
            <td>{{post_info.body}}</td> 
            <td>{{post_info.categories}}</td> 
            <td>{{post_info.status}}</td>
            <td>{{post_info.post_date}}</td>
            <td>{{account_info.email}}</td>
        </tr> 
    </table>  



{% endblock %}{% extends "base.html" %}

{% block main_content %}
<form method=post action="{{url_for('insert_post')}}">
    <fieldset>
    <legend>Make a post</legend>
    <table>
        <tr><td><label for="u_name" accesskey="i">(i.) Remind us your username:</label></td>
            <td><input id="u_name" type="text" name="u_name"></td></tr>
        
            <tr><td><label for="title" accesskey="i">(i.) Title your post:</label></td>
            <td><input id="title" type="text" name="title"></td></tr>

        <tr><td><label for="body" accesskey="t">(t) Describe your request or service:</label></td>
            <td><input id="body" type="text" name="body"></td></tr>
            
        <tr><td><label for="type" accesskey="r">(r) Is this a request or service:</label> <br>
            <input type="checkbox" id="provision" name="type" value="provision" />
            <label for="provision">Provision</label>
            <br>
            
            <input type="checkbox" id="request" name="type" value="request" />
            <label for="request">Request</label>
            
            </td></tr>
        
        <tr><td><label for="category" accesskey="r">(r) Check off relevant categories:</label> <br>
            
        <input type="checkbox" id="clothing" name="category" value="clothing" />
        <label for="clothing">Clothing (sewing, hemming, etc.)</label>
        <br>
    
        <input type="checkbox" id="fitness" name="category" value="fitness" />
        <label for="fitness">Fitness</label>
        <br> 
        
        <input type="checkbox" id="beauty" name="category" value="beauty" />
        <label for="beauty">Beauty</label>
        <br> 
         
        <input type="checkbox" id="crafts" name="category" value="crafts" />
        <label for="crafts">Crafts</label>
         <br> 
         
        <input type="checkbox" id="transportation" name="category" value="transportation" />
        <label for="transportation">Transportation</label>
        <br>
        
        <input type="checkbox" id="photo" name="category" value="photo" />
        <label for="photo">Photography</label>
        <br>
        
        <input type="checkbox" id="other" name="category" value="other" />
        <label for="other">Other</label>
        
        </td></tr>
    </table>
    </fieldset>

    <p> <input type='submit' value='Upload Post'> </p>

</form>

{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>{{header}}</h1>

<form method="post" action="{{url_for('login')}}">
    <form> 
    <div class="form-group">
        <label for="username"><b>Username: </b></label>
        <input type="text" placeholder="Enter username" name="username" required>
    </div>
    <div class="form-group">
        <label for="passw"><b>Password: </b></label>
        <input type="password" placeholder="Enter password" name="passw" required>
    </div>
    <input type="submit" value="Login">
</form>


{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>{{header}}</h1>

<div class="centered-buttons">
    <div class="button-container">
        <a href="{{ url_for('join') }}" class="button">Create an Account</a>
    </div>
    <div class="button-container">
        <a href="{{ url_for('login') }}" class="button">Login</a>
    </div>
</div>

{% endblock %}

{% extends "base.html" %}

{% block main_content %}
<p>This page will show a list of providers who made a post. This page is ideal for those looking for someone to provide them with a service</p>
<p>Provider posts matching {{key_phrase}}:</p>
<body>
    {%for provider in providers%}
    <ul>
        <li> <a href="{{url_for('post', pid= provider.pid)}}">{{provider.title}}</a> </li>
    </ul>
    {%endfor%}
</body>

{% endblock %}{% extends "base.html" %}

{% block main_content %}

<p>This page is displaying all requests for services. This page is for providers looking to give a service</p>
<p>Request posts matching {{key_phrase}}:</p>
<body>
    {%for request in requests%}
    <ul>
         <li> <a href="{{url_for('post', pid= request.pid)}}">{{request.title}}</a> </li>

    </ul>
    {%endfor%}
</body>

{% endblock %}{% extends "base.html" %}

{% block main_content %}
<h1>{{header}}</h1>
<div class="form">
    <form  method="post" action="{{url_for('search')}}">
        <p><label>search: <input type="text" required name="query"></label>
        <label>kind
                <select required name="kind">
                    <option value="">choose one</option>
                    <option value="provision">service provision</option>
                    <option value="request">service request</option>
                </select>
        </label>
        <input type="submit" value="search"></p>
    </form>
</div>

{% endblock %}{% extends "base.html" %}

{% block main_content %}

<form method="POST" action="/update/{{user}}">
    <table>
        <tr>
          <td><label for="fname"> First Name </label></td>
          <td><input id="fname" name='fname' value="{{account.f_name}}"></td> 
        </tr>
        <tr>
          <td><label for="lname">Last Name </label></td>
          <td><input id="lname" name='lname' value={{account.l_name}}></td>
        </tr>
        <tr>
          <td><label for="email">Email </label></td>
          <td><input id="email" name='email' value={{account.email}}></td>
        </tr>
        <tr>
            <td><label for="username">Username </label></td>
            <td><input id="username" name='username' value={{account.username}}></td>
        </tr>
        <tr>
            <td><label for="skills">Skills: </label></td>
            <td>
                <p>Please update the skills you are currently interested in providing (separated by comma)</p>
                <input type="text" name="skills" id="skills" value="{% for entry in skills %}{{ entry.skill }}{% if not loop.last %}, {% endif %}{% endfor %}">
            </td>

            </td>
        </tr>
      </table>
      <input type="submit" name="submit" value="update">
  </form>
  {% endblock %}
/* the --color-header and others are CSS variables, which we access later. 
*/

HTML {
    --color-header: rgb(48, 117, 140);  /* color for H1-H6 and others. was deepskyblue but poor contrast. */
    --color-hilite: #b50000;  /* was red, but this avoids WAVE contrast errors */ 
    --color-focus: #56B929;
    --font-family: Serif;
    font-family: var(--font-family)
}

/* For flashed messages; make them stand out using red and italics */

#messages {
    color: var(--color-hilite);
    font-style: italic;
}


   
h1 {
    text-align: center;
    font-size: 200%;
    color: var(--color-header);
 }



h2, h3 {
    color:rgb(35, 7, 119);
}
    

/* for a simple navbar. Talk to Scott if you want drop-downs. */
nav > ul {
    display: flex;
    flex-direction: row;
}

nav ul {
    list-style-type: none;
    margin: 0px;
    padding: 0px;
}

nav > ul > li {
    flex: 0 0 auto;
    width: 15em; 
}

nav button, nav a {
    display: block;
    box-sizing: border-box; /* easier to make button and A the same size */
    width: 100%;
    height: 40px;
    padding: 0px;
    padding-bottom: 5px;
    background-color: var(--color-header); /* was #3498db */
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
    /* Firefox uses font -apple-system unless I repeat the font spec here. */
    font-family: var(--font-family);
    color:rgb(240, 248, 244);
    font-weight: bold;
    font-size: 1.4rem;
}

/* Only the top-level buttons are centered; lower ones are left-aligned. */
nav > ul > li > button , nav > ul > li > a {
    text-align: center;
}

/* because of the margin trick, this can only be used for the last element */

nav li.right {
    margin-left: auto;
}

nav button:hover, button:focus, nav a:hover, nav a:focus {
    background-color: var(--color-focus);
}

form {
    background-color: #e3e3e3; 
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(181, 179, 179, 0.2);
    max-width: 400px;
    margin: auto;
}

.form-group {
    margin-bottom: 15px;
}

input[type="text"], input[type="password"] {
    width: 100%;
    padding: 12px 20px;
    margin: 8px 0;
    display: inline-block;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

input[type="submit"] {
    width: 100%;
    background-color: var(--color-header);
    color: white;
    padding: 14px 20px;
    margin: 8px 0;
    border: none;
    border-radius: 4px;
}


label {
    display: block;
    margin-top: 10px;
}

.centered-buttons {
    text-align: center;
    margin-top: 20px;
}

.button {
    display: inline-block;
    background-color: rgb(185, 215, 254);
    width: 150px; 
    height: 35px;
    padding: 5px;
    font-size: 1.25rem; 
    border: 1px solid rgb(0, 0, 0);
    border-radius: 5px;
    text-align: center; 
}

.button-container {
    display: inline-flex;
    width: auto; 
}

.button-container p {
    margin-bottom: 10px; 
}


.photobox input[type="submit"] {
    width: 120px; 
    height: 40px; 
    text-align: center;
}

.photobox input[type="file"] {
    display: inline-block; 
}
.photobox p{
    text-align: center;
}


.information-box {
    border: 1px solid rgb(51, 103, 103); 
    padding: 20px;
    margin: 20px 0; 
    border-radius: 10px; /* Rounded corners */
    background-color:rgb(166, 210, 225) ; 
    max-width: 400px; 
    margin-right: auto;
}

.information-box .button{
    width: 105px; 
    height: 30px; 
    text-align: center;
    line-height: 25px;
    font-size: 15px;
    
}
.your-information {
    text-align: center; 
    color: #000000; 
    margin-bottom: 10px;
}

ul {
    padding: 1; /* Removes default padding */
}

li {
    padding: 5px 0; 
}

.posts table, th, td {
    border: 1px solid;
  }
.posts table{
    width: 70%;
}
.posts td{
    text-align: center;
}



